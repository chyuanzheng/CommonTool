* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon May 27 17:04:45 2013  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

     1                                  ;***************************************************************************
     2                                  ; C Compiler for R8C/Tiny, M16C/60,30,20,10
     3                                  ; Copyright(C) 1999(2000-2006). Renesas Technology Corp.
     4                                  ; and Renesas Solutions Corp., All rights reserved.
     5                                  ;
     6                                  ; ncrt0.a30 : Startup Program for R8C/Tiny
     7                                  ;       
     8                                  ; $Date: 2006/11/22 04:13:59 $
     9                                  ; $Revision: 1.1.4.1 $
    10                                  ;***************************************************************************
    11                                  
    12                                  ;---------------------------------------------------------------------
    13                                  ; include files
    14                                  ;---------------------------------------------------------------------
    15                                  		.list		OFF
    16                                  		.list		ON
    17                                  
    18                                  ;=====================================================================
    19                                  ; Interrupt section start
    20                                  ;---------------------------------------------------------------------
    21                                  		.insf		start,S,0
    22                                  		.glb		start
    23                                  		.section	interrupt
    24  00000                           start:
    25                                  ;---------------------------------------------------------------------
    26                                  ; after reset,this program will start
    27                                  ;---------------------------------------------------------------------
    28  00000  EB400000r                		ldc			#istack_top,isp		;set istack pointer
    29  00004  C7020A00              S  		mov.b		#02h,0ah
    30  00008  B70400                Z  		mov.b		#00h,04h			;set processer mode 
    31                                  		
    32  0000B  B70A00                Z  		mov.b		#00h,0ah
    33                                  .if __STACKSIZE__ != 0
    34  0000E  EB308000                 		ldc			#0080h,flg
    35  00012  EB500000r                		ldc			#stack_top,sp		;set stack pointer 
    36                                  .else
    37                                  .endif
    38  00016  EB600004                 		ldc			#data_SE_top,sb		;set sb register 
    39  0001A  EB200000                 		ldintb		#__VECTOR_ADR__
               EB10DCFE 
    40                                  
    41                                  ;=====================================================================
    42                                  ; NEAR area initialize.
    43                                  ;---------------------------------------------------------------------
    44                                  ; bss zero clear
    45                                  ;---------------------------------------------------------------------
    46                                  		N_BZERO		bss_SE_top,bss_SE
    47  00022  B4                1 M Z  		mov.b		#00H, R0L
    48  00023  AA0000r           1 M S  		mov.w		#(bss_SE_top & 0FFFFH), A1
    49  00026  75C30000r         1 M    		mov.w		#sizeof bss_SE , R3
    50  0002A  7CEA              1 M    		sstr.b
    51                           1 M    		.endm
    52                                  		N_BZERO		bss_SO_top,bss_SO
    53  0002C  B4                1 M Z  		mov.b		#00H, R0L
    54  0002D  AA0000r           1 M S  		mov.w		#(bss_SO_top & 0FFFFH), A1
    55  00030  75C30000r         1 M    		mov.w		#sizeof bss_SO , R3
    56  00034  7CEA              1 M    		sstr.b
    57                           1 M    		.endm
    58                                  		N_BZERO		bss_NE_top,bss_NE
    59  00036  B4                1 M Z  		mov.b		#00H, R0L
    60  00037  AA0000r           1 M S  		mov.w		#(bss_NE_top & 0FFFFH), A1
    61  0003A  75C30000r         1 M    		mov.w		#sizeof bss_NE , R3
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon May 27 17:04:45 2013  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

    62  0003E  7CEA              1 M    		sstr.b
    63                           1 M    		.endm
    64                                  		N_BZERO		bss_NO_top,bss_NO
    65  00040  B4                1 M Z  		mov.b		#00H, R0L
    66  00041  AA0000r           1 M S  		mov.w		#(bss_NO_top & 0FFFFH), A1
    67  00044  75C30000r         1 M    		mov.w		#sizeof bss_NO , R3
    68  00048  7CEA              1 M    		sstr.b
    69                           1 M    		.endm
    70                                  
    71                                  ;---------------------------------------------------------------------
    72                                  ; initialize data section
    73                                  ;---------------------------------------------------------------------
    74                                  		N_BCOPY		data_SEI_top,data_SE_top,data_SE
    75  0004A  A20000r           1 M S  		mov.w		#(data_SEI_top & 0FFFFH),A0
    76  0004D  74C300r           1 M    		mov.b		#(data_SEI_top >>16),R1H
    77  00050  AA0004            1 M S  		mov.w		#data_SE_top ,A1
    78  00053  75C30000r         1 M    		mov.w		#sizeof data_SE , R3
    79  00057  7CE8              1 M    		smovf.b
    80                           1 M    		.endm
    81                                  		N_BCOPY		data_SOI_top,data_SO_top,data_SO
    82  00059  A20000r           1 M S  		mov.w		#(data_SOI_top & 0FFFFH),A0
    83  0005C  74C300r           1 M    		mov.b		#(data_SOI_top >>16),R1H
    84  0005F  AA0000r           1 M S  		mov.w		#data_SO_top ,A1
    85  00062  75C30000r         1 M    		mov.w		#sizeof data_SO , R3
    86  00066  7CE8              1 M    		smovf.b
    87                           1 M    		.endm
    88                                  		N_BCOPY		data_NEI_top,data_NE_top,data_NE
    89  00068  A20000r           1 M S  		mov.w		#(data_NEI_top & 0FFFFH),A0
    90  0006B  74C300r           1 M    		mov.b		#(data_NEI_top >>16),R1H
    91  0006E  AA0000r           1 M S  		mov.w		#data_NE_top ,A1
    92  00071  75C30000r         1 M    		mov.w		#sizeof data_NE , R3
    93  00075  7CE8              1 M    		smovf.b
    94                           1 M    		.endm
    95                                  		N_BCOPY		data_NOI_top,data_NO_top,data_NO
    96  00077  A20000r           1 M S  		mov.w		#(data_NOI_top & 0FFFFH),A0
    97  0007A  74C300r           1 M    		mov.b		#(data_NOI_top >>16),R1H
    98  0007D  AA0000r           1 M S  		mov.w		#data_NO_top ,A1
    99  00080  75C30000r         1 M    		mov.w		#sizeof data_NO , R3
   100  00084  7CE8              1 M    		smovf.b
   101                           1 M    		.endm
   102                                  
   103                                  ;=====================================================================
   104                                  ; heap area initialize
   105                                  ;---------------------------------------------------------------------
   106                                  .if __HEAPSIZE__ != 0
   107                                  		.glb		__mnext
   108                                  		.glb		__msize
   109  00086  75CF0000r0000r           		mov.w		#(heap_top&0FFFFH), __mnext
   110  0008C  75CF0000r8000            		mov.w		#(__HEAPSIZE__&0FFFFH), __msize
   111                                  .endif
   112                                  
   113                                  ;=====================================================================
   114                                  ; Initialize standard I/O
   115                                  ;---------------------------------------------------------------------
   116                                  .if __STANDARD_IO__ == 1
   117                                  		.glb		__init
   118                                  		.call		__init,G
   119  00092  FD000000r             A  		jsr.a		__init
   120                                  .endif
   121                                  
   122                                  ;=====================================================================
   123                                  ; Call main() function
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Mon May 27 17:04:45 2013  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   124                                  ;---------------------------------------------------------------------
   125  00096  EB700000                 		ldc			#0h,fb				; for debuger
   126                                  
   127                                  		.glb		_main
   128  0009A  FD000000r             A  		jsr.a		_main
   129                                  
   130                                  ;=====================================================================
   131                                  ; exit() function
   132                                  ;---------------------------------------------------------------------
   133                                  		.glb		_exit
   134                                  		.glb		$exit
   135  0009E                           _exit:									; End program
   136  0009E                           $exit:
   137  0009E  FEFF                  B  		jmp			_exit
   138                                  		.einsf
   139                                  ;=====================================================================
   140                                  ; dummy interrupt function
   141                                  ;---------------------------------------------------------------------
   142                                  		.glb		dummy_int
   143  000A0                           dummy_int:
   144  000A0  FB                       		reit
   145                                  
   146                                  		.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00146   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0000256(00100H)  stack
DATA     0000128(00080H)  heap
ROMDATA  0000000(00000H)  rom_NE
ROMDATA  0000000(00000H)  rom_NO
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
CODE     0000000(00000H)  program
CODE     0000000(00000H)  interrupt
ROMDATA  0000256(00100H)  vector
ROMDATA  0000036(00024H)  fvector
CODE     0000161(000A1H)  interrupt
